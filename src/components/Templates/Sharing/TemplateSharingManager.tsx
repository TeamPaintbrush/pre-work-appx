"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChecklistTemplate } from '../../../types';
import { 
  TemplateShare, 
  ShareTarget, 
  SharePermissions, 
  AccessRestriction 
} from '../../../types/templates';
import { templateService } from '../../../services/templates/TemplateService';
import Button from '../../UI/Button';
import Modal from '../../UI/Modal';

interface TemplateSharingManagerProps {
  template: ChecklistTemplate;
  isOpen: boolean;
  onClose: () => void;
  userRole?: 'manager' | 'admin';
}

interface SharingState {
  shares: TemplateShare[];
  loading: boolean;
  error: string | null;
  showCreateShare: boolean;
  selectedShare: TemplateShare | null;
}

interface ShareFormData {
  shareType: 'user' | 'team' | 'organization' | 'public';
  targets: string[];
  permissions: SharePermissions;
  expiresAt?: Date;
  accessRestrictions: AccessRestriction[];
  message?: string;
}

const TemplateSharingManager: React.FC<TemplateSharingManagerProps> = ({
  template,
  isOpen,
  onClose,
  userRole = 'manager'
}) => {
  const [state, setState] = useState<SharingState>({
    shares: [],
    loading: true,
    error: null,
    showCreateShare: false,
    selectedShare: null
  });

  // Load existing shares
  useEffect(() => {
    if (isOpen && template) {
      loadShares();
    }
  }, [isOpen, template]);

  const loadShares = useCallback(async () => {
    setState(prev => ({ ...prev, loading: true, error: null }));
    
    try {
      const shares = templateService.getTemplateShares(template.id);
      setState(prev => ({
        ...prev,
        shares: shares.filter(share => share.isActive),
        loading: false
      }));
    } catch (error) {
      setState(prev => ({
        ...prev,
        error: 'Failed to load template shares',
        loading: false
      }));
    }
  }, [template]);

  const handleCreateShare = useCallback(async (formData: ShareFormData) => {
    try {
      setState(prev => ({ ...prev, loading: true }));
      
      const shareData = {
        sharedBy: 'current-user', // TODO: Get from auth context
        sharedWith: formData.targets.map(target => ({
          type: formData.shareType,
          id: target,
          name: target, // TODO: Resolve actual names
          email: formData.shareType === 'user' ? target : undefined
        })),
        permissions: formData.permissions,
        expiresAt: formData.expiresAt,
        shareLink: undefined // Will be generated by service
      };

      await templateService.shareTemplate(template.id, shareData);
      await loadShares();
      
      setState(prev => ({ ...prev, showCreateShare: false }));
    } catch (error) {
      setState(prev => ({
        ...prev,
        error: 'Failed to create share',
        loading: false
      }));
    }
  }, [template, loadShares]);

  const handleRevokeShare = useCallback(async (shareId: string) => {
    try {
      setState(prev => ({ ...prev, loading: true }));
      
      await templateService.revokeShare(shareId);
      await loadShares();
    } catch (error) {
      setState(prev => ({
        ...prev,
        error: 'Failed to revoke share',
        loading: false
      }));
    }
  }, [loadShares]);

  const formatDate = (date: Date): string => {
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const getShareTypeIcon = (type: string): string => {
    switch (type) {
      case 'user': return '👤';
      case 'team': return '👥';
      case 'organization': return '🏢';
      case 'public': return '🌍';
      default: return '📤';
    }
  };

  const getPermissionLevel = (permissions: SharePermissions): string => {
    if (permissions.canEdit) return 'Editor';
    if (permissions.canShare) return 'Collaborator';
    if (permissions.canUse) return 'User';
    return 'Viewer';
  };

  const getPermissionColor = (permissions: SharePermissions): string => {
    if (permissions.canEdit) return 'bg-red-100 text-red-800';
    if (permissions.canShare) return 'bg-orange-100 text-orange-800';
    if (permissions.canUse) return 'bg-blue-100 text-blue-800';
    return 'bg-gray-100 text-gray-800';
  };

  if (!isOpen) return null;

  return (
    <>
      <Modal
        isOpen={isOpen}
        onClose={onClose}
        title="Template Sharing"
        className="max-w-4xl"
      >
        <div className="p-6">
          {state.loading && state.shares.length === 0 ? (
            <div className="flex items-center justify-center py-12">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-3 text-gray-600">Loading shares...</span>
            </div>
          ) : state.error ? (
            <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
              <div className="flex">
                <div className="text-red-400">⚠️</div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-red-800">Error</h3>
                  <div className="mt-2 text-sm text-red-700">{state.error}</div>
                </div>
              </div>
            </div>
          ) : null}

          <div className="space-y-6">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-medium text-gray-900">{template.name}</h3>
                <p className="text-sm text-gray-500">
                  Shared with {state.shares.length} recipient{state.shares.length !== 1 ? 's' : ''}
                </p>
              </div>
              
              <Button
                onClick={() => setState(prev => ({ ...prev, showCreateShare: true }))}
                disabled={state.loading}
              >
                🤝 Share Template
              </Button>
            </div>

            {/* Existing Shares */}
            <div className="space-y-4">
              <h4 className="text-md font-medium text-gray-900">Current Shares</h4>
              
              {state.shares.length === 0 ? (
                <div className="text-center py-8 border border-dashed border-gray-300 rounded-lg">
                  <div className="text-4xl mb-2">🤝</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    No shares yet
                  </h3>
                  <p className="text-gray-500 mb-4">
                    Share this template with team members or organizations
                  </p>
                  <Button
                    onClick={() => setState(prev => ({ ...prev, showCreateShare: true }))}
                    variant="secondary"
                  >
                    Create First Share
                  </Button>
                </div>
              ) : (
                <div className="space-y-3">
                  {state.shares.map((share, index) => (
                    <motion.div
                      key={share.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="border border-gray-200 rounded-lg p-4 bg-white hover:shadow-sm transition-shadow"
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <span className="text-2xl">
                              {getShareTypeIcon(share.sharedWith[0]?.type)}
                            </span>
                            
                            <div>
                              <h5 className="font-medium text-gray-900">
                                {share.sharedWith.map(target => target.name).join(', ')}
                              </h5>
                              <p className="text-sm text-gray-600 capitalize">
                                {share.sharedWith[0]?.type} share
                              </p>
                            </div>

                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPermissionColor(share.permissions)}`}>
                              {getPermissionLevel(share.permissions)}
                            </span>
                          </div>

                          <div className="flex items-center space-x-4 text-sm text-gray-500">
                            <span>📅 Created {formatDate(share.createdAt)}</span>
                            {share.expiresAt && (
                              <span>⏰ Expires {formatDate(share.expiresAt)}</span>
                            )}
                            <span>👁️ {share.accessCount} access{share.accessCount !== 1 ? 'es' : ''}</span>
                          </div>

                          {/* Permissions Detail */}
                          <div className="mt-3 flex flex-wrap gap-2">
                            {share.permissions.canView && (
                              <span className="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded">
                                👁️ View
                              </span>
                            )}
                            {share.permissions.canUse && (
                              <span className="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded">
                                ✅ Use
                              </span>
                            )}
                            {share.permissions.canEdit && (
                              <span className="px-2 py-1 text-xs bg-orange-100 text-orange-700 rounded">
                                ✏️ Edit
                              </span>
                            )}
                            {share.permissions.canShare && (
                              <span className="px-2 py-1 text-xs bg-purple-100 text-purple-700 rounded">
                                🤝 Share
                              </span>
                            )}
                          </div>

                          {/* Share Link */}
                          {share.shareLink && (
                            <div className="mt-3 p-2 bg-gray-50 rounded border">
                              <div className="flex items-center space-x-2">
                                <span className="text-sm text-gray-600 font-medium">Share Link:</span>
                                <code className="text-xs text-gray-700 bg-white px-2 py-1 rounded flex-1 truncate">
                                  {share.shareLink}
                                </code>
                                <Button
                                  onClick={() => navigator.clipboard.writeText(share.shareLink!)}
                                  variant="secondary"
                                  size="sm"
                                >
                                  📋 Copy
                                </Button>
                              </div>
                            </div>
                          )}
                        </div>

                        {/* Actions */}
                        <div className="flex items-center space-x-2 ml-4">
                          <Button
                            onClick={() => setState(prev => ({ ...prev, selectedShare: share }))}
                            variant="secondary"
                            size="sm"
                          >
                            📊 Details
                          </Button>
                          
                          {userRole === 'admin' && (
                            <Button
                              onClick={() => handleRevokeShare(share.id)}
                              variant="secondary"
                              size="sm"
                              className="text-red-600 hover:text-red-700"
                              disabled={state.loading}
                            >
                              🗑️ Revoke
                            </Button>
                          )}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </Modal>

      {/* Create Share Modal */}
      <CreateShareModal
        isOpen={state.showCreateShare}
        onClose={() => setState(prev => ({ ...prev, showCreateShare: false }))}
        onShare={handleCreateShare}
        template={template}
      />

      {/* Share Details Modal */}
      {state.selectedShare && (
        <ShareDetailsModal
          isOpen={true}
          onClose={() => setState(prev => ({ ...prev, selectedShare: null }))}
          share={state.selectedShare}
          onRevoke={handleRevokeShare}
          userRole={userRole}
        />
      )}
    </>
  );
};

// Create Share Modal Component
interface CreateShareModalProps {
  isOpen: boolean;
  onClose: () => void;
  onShare: (formData: ShareFormData) => void;
  template: ChecklistTemplate;
}

const CreateShareModal: React.FC<CreateShareModalProps> = ({
  isOpen,
  onClose,
  onShare,
  template
}) => {
  const [formData, setFormData] = useState<ShareFormData>({
    shareType: 'user',
    targets: [''],
    permissions: {
      canView: true,
      canUse: true,
      canEdit: false,
      canShare: false,
      canVersion: false
    },
    accessRestrictions: []
  });

  const [showAdvanced, setShowAdvanced] = useState(false);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate form
    if (formData.targets.some(target => !target.trim())) {
      return; // TODO: Show validation error
    }

    onShare(formData);
  };

  const updateTarget = (index: number, value: string) => {
    const newTargets = [...formData.targets];
    newTargets[index] = value;
    setFormData(prev => ({ ...prev, targets: newTargets }));
  };

  const addTarget = () => {
    setFormData(prev => ({
      ...prev,
      targets: [...prev.targets, '']
    }));
  };

  const removeTarget = (index: number) => {
    setFormData(prev => ({
      ...prev,
      targets: prev.targets.filter((_, i) => i !== index)
    }));
  };

  if (!isOpen) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Share Template"
      className="max-w-2xl"
    >
      <form onSubmit={handleSubmit} className="p-6 space-y-6">
        {/* Share Type */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Share Type
          </label>
          <select
            value={formData.shareType}
            onChange={(e) => setFormData(prev => ({ 
              ...prev, 
              shareType: e.target.value as any,
              targets: [''] // Reset targets when changing type
            }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="user">👤 Individual User</option>
            <option value="team">👥 Team</option>
            <option value="organization">🏢 Organization</option>
            <option value="public">🌍 Public Link</option>
          </select>
        </div>

        {/* Recipients */}
        {formData.shareType !== 'public' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              {formData.shareType === 'user' ? 'Email Addresses' : 
               formData.shareType === 'team' ? 'Team Names' : 'Organization Names'}
            </label>
            
            <div className="space-y-2">
              {formData.targets.map((target, index) => (
                <div key={index} className="flex items-center space-x-2">
                  <input
                    type={formData.shareType === 'user' ? 'email' : 'text'}
                    value={target}
                    onChange={(e) => updateTarget(index, e.target.value)}
                    placeholder={
                      formData.shareType === 'user' ? 'user@example.com' :
                      formData.shareType === 'team' ? 'Team name' : 'Organization name'
                    }
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                  
                  {formData.targets.length > 1 && (
                    <Button
                      type="button"
                      onClick={() => removeTarget(index)}
                      variant="secondary"
                      size="sm"
                      className="text-red-600 hover:text-red-700"
                    >
                      ✕
                    </Button>
                  )}
                </div>
              ))}
              
              <Button
                type="button"
                onClick={addTarget}
                variant="secondary"
                size="sm"
              >
                ➕ Add Another
              </Button>
            </div>
          </div>
        )}

        {/* Permissions */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            Permissions
          </label>
          
          <div className="space-y-3">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.permissions.canView}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  permissions: { ...prev.permissions, canView: e.target.checked }
                }))}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="ml-2 text-sm text-gray-700">
                👁️ Can view template details
              </span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.permissions.canUse}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  permissions: { ...prev.permissions, canUse: e.target.checked }
                }))}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="ml-2 text-sm text-gray-700">
                ✅ Can use template to create checklists
              </span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.permissions.canEdit}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  permissions: { ...prev.permissions, canEdit: e.target.checked }
                }))}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="ml-2 text-sm text-gray-700">
                ✏️ Can edit template
              </span>
            </label>

            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.permissions.canShare}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  permissions: { ...prev.permissions, canShare: e.target.checked }
                }))}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="ml-2 text-sm text-gray-700">
                🤝 Can share template with others
              </span>
            </label>
          </div>
        </div>

        {/* Advanced Options */}
        <div>
          <Button
            type="button"
            onClick={() => setShowAdvanced(!showAdvanced)}
            variant="secondary"
            size="sm"
          >
            {showAdvanced ? '🔼' : '🔽'} Advanced Options
          </Button>

          {showAdvanced && (
            <div className="mt-4 space-y-4 p-4 border border-gray-200 rounded-lg bg-gray-50">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Expiration Date (Optional)
                </label>
                <input
                  type="datetime-local"
                  value={formData.expiresAt ? formData.expiresAt.toISOString().slice(0, 16) : ''}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    expiresAt: e.target.value ? new Date(e.target.value) : undefined
                  }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Message (Optional)
                </label>
                <textarea
                  value={formData.message || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Add a message for the recipients..."
                />
              </div>
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="flex space-x-3 pt-4 border-t border-gray-200">
          <Button
            type="button"
            onClick={onClose}
            variant="secondary"
            className="flex-1"
          >
            Cancel
          </Button>
          <Button
            type="submit"
            className="flex-1"
            disabled={formData.targets.some(target => !target.trim())}
          >
            🤝 Share Template
          </Button>
        </div>
      </form>
    </Modal>
  );
};

// Share Details Modal Component
interface ShareDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  share: TemplateShare;
  onRevoke: (shareId: string) => void;
  userRole?: 'manager' | 'admin';
}

const ShareDetailsModal: React.FC<ShareDetailsModalProps> = ({
  isOpen,
  onClose,
  share,
  onRevoke,
  userRole
}) => {
  if (!isOpen) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Share Details"
      className="max-w-2xl"
    >
      <div className="p-6 space-y-6">
        {/* Share Info */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <h4 className="text-sm font-medium text-gray-700">Share Type</h4>
            <p className="text-gray-900 capitalize">
              {share.sharedWith[0]?.type}
            </p>
          </div>
          
          <div>
            <h4 className="text-sm font-medium text-gray-700">Access Count</h4>
            <p className="text-gray-900">{share.accessCount} times</p>
          </div>
          
          <div>
            <h4 className="text-sm font-medium text-gray-700">Created</h4>
            <p className="text-gray-900">
              {new Date(share.createdAt).toLocaleDateString()}
            </p>
          </div>
          
          {share.expiresAt && (
            <div>
              <h4 className="text-sm font-medium text-gray-700">Expires</h4>
              <p className="text-gray-900">
                {new Date(share.expiresAt).toLocaleDateString()}
              </p>
            </div>
          )}
        </div>

        {/* Recipients */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">Recipients</h4>
          <div className="space-y-2">
            {share.sharedWith.map((target, index) => (
              <div key={index} className="flex items-center space-x-3 p-2 bg-gray-50 rounded">
                <span className="text-lg">
                  {target.type === 'user' ? '👤' : target.type === 'team' ? '👥' : '🏢'}
                </span>
                <div>
                  <div className="font-medium">{target.name}</div>
                  {target.email && <div className="text-sm text-gray-600">{target.email}</div>}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Permissions */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-2">Permissions</h4>
          <div className="flex flex-wrap gap-2">
            {share.permissions.canView && (
              <span className="px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded">
                👁️ View
              </span>
            )}
            {share.permissions.canUse && (
              <span className="px-2 py-1 text-xs bg-blue-100 text-blue-700 rounded">
                ✅ Use
              </span>
            )}
            {share.permissions.canEdit && (
              <span className="px-2 py-1 text-xs bg-orange-100 text-orange-700 rounded">
                ✏️ Edit
              </span>
            )}
            {share.permissions.canShare && (
              <span className="px-2 py-1 text-xs bg-purple-100 text-purple-700 rounded">
                🤝 Share
              </span>
            )}
          </div>
        </div>

        {/* Actions */}
        <div className="flex space-x-3 pt-4 border-t border-gray-200">
          <Button
            onClick={onClose}
            variant="secondary"
            className="flex-1"
          >
            Close
          </Button>
          
          {userRole === 'admin' && (
            <Button
              onClick={() => {
                onRevoke(share.id);
                onClose();
              }}
              className="flex-1 bg-red-600 hover:bg-red-700"
            >
              🗑️ Revoke Share
            </Button>
          )}
        </div>
      </div>
    </Modal>
  );
};

export default TemplateSharingManager;
